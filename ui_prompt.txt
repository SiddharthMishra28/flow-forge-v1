# 🎨 Next.js UI Development Prompt for Pipeline Orchestrator

**Project**: Pipeline Orchestrator Frontend  
**Backend API**: Spring Boot 3.x REST API  
**Target Framework**: Next.js 14+ with TypeScript  
**Design Goal**: Professional, modern, techie-looking dashboard for test automation pipeline orchestration

---

## 🎯 Project Overview

Create a comprehensive, production-ready Next.js frontend that seamlessly integrates with the Pipeline Orchestrator Spring Boot backend. The UI should be a sophisticated dashboard for managing GitLab pipeline orchestration, test automation flows, and analytics - targeting DevOps engineers, QA engineers, and technical managers.

**Backend API Base URL**: `http://localhost:8080`  
**API Documentation**: Available at `http://localhost:8080/swagger-ui.html`

---

## 🏗️ Technical Stack Requirements

### Core Framework
- **Next.js 14+** with App Router
- **TypeScript** (strict mode)
- **Tailwind CSS** for styling
- **shadcn/ui** component library
- **React Query (TanStack Query)** for API state management
- **Zustand** for global state management
- **React Hook Form** with Zod validation
- **Lucide React** for icons

### Additional Libraries
- **Recharts** for analytics charts and graphs
- **React Table (TanStack Table)** for data tables
- **date-fns** for date manipulation
- **axios** for HTTP requests
- **react-hot-toast** for notifications
- **framer-motion** for animations
- **next-themes** for dark/light mode
- **cmdk** for command palette

---

## 🎨 Design System & Aesthetics

### Visual Theme
- **Primary Colors**: Deep blue (#1e40af) and electric blue (#3b82f6)
- **Accent Colors**: Green (#10b981) for success, Red (#ef4444) for errors, Orange (#f59e0b) for warnings
- **Background**: Dark theme primary with light theme option
- **Typography**: Inter font family
- **Border Radius**: Consistent 8px for cards, 6px for buttons
- **Shadows**: Subtle, layered shadows for depth

### Design Principles
- **Glassmorphism**: Subtle glass effects on cards and modals
- **Neumorphism**: Soft, subtle 3D effects on interactive elements
- **Micro-interactions**: Smooth hover states, loading animations
- **Responsive Design**: Mobile-first approach
- **Accessibility**: WCAG 2.1 AA compliance
- **Data Density**: Information-rich but not cluttered

---

## 📱 Page Structure & Navigation

### Main Layout
```
├── Header (Logo, Navigation, User Menu, Theme Toggle)
├── Sidebar (Collapsible, with icons and labels)
├── Main Content Area
└── Footer (Status indicators, version info)
```

### Navigation Structure
1. **Dashboard** (`/`) - Overview and quick actions
2. **Applications** (`/applications`) - GitLab project management
3. **Test Data** (`/test-data`) - Test data management
4. **Flow Steps** (`/flow-steps`) - Individual step configuration
5. **Flows** (`/flows`) - Flow orchestration
6. **Executions** (`/executions`) - Flow execution monitoring
7. **Analytics** (`/analytics`) - Metrics and reporting
8. **SquashTM** (`/squashtm`) - SquashTM integration
9. **Settings** (`/settings`) - Application configuration

---

## 🏠 Page-by-Page Requirements

### 1. Dashboard (`/`)
**Purpose**: Executive overview and quick actions

**Components**:
- **Hero Section**: Welcome message, quick stats (total flows, active executions, success rate)
- **Quick Actions**: Large buttons for "Create Flow", "Execute Flow", "View Analytics"
- **Recent Executions**: Table showing last 10 flow executions with status indicators
- **System Health**: Cards showing GitLab connectivity, database status, active threads
- **Analytics Preview**: Mini charts showing trends (pass/fail rate, execution duration)

**Visual Elements**:
- Animated counters for statistics
- Status indicators with color coding
- Progress bars for active executions
- Interactive charts with hover effects

### 2. Applications (`/applications`)
**Purpose**: Manage GitLab projects

**Components**:
- **Header**: Page title, "Add Application" button, search/filter
- **Applications Grid**: Cards showing each application with:
  - GitLab project ID and name
  - Connection status indicator
  - Last used timestamp
  - Actions menu (edit, delete, test connection)
- **Add/Edit Modal**: Form for application details
- **Connection Test**: Real-time GitLab API connectivity check

**Features**:
- Search and filter applications
- Bulk operations
- Connection status monitoring
- Import from GitLab groups

### 3. Test Data (`/test-data`)
**Purpose**: Manage test data sets

**Components**:
- **Data Sets List**: Table with name, description, variable count, usage count
- **Data Set Detail**: Expandable rows showing key-value pairs
- **Add/Edit Form**: Rich form for creating test data with:
  - Name and description fields
  - Dynamic key-value pair editor
  - JSON import/export
  - Variable validation
- **Usage Tracking**: Shows which flows use each data set

**Features**:
- JSON editor with syntax highlighting
- Variable validation and type checking
- Import/export functionality
- Usage analytics

### 4. Flow Steps (`/flow-steps`)
**Purpose**: Configure individual pipeline steps

**Components**:
- **Steps Table**: Comprehensive table with:
  - Application name
  - Branch and test tag
  - Test stage
  - Associated test data
  - SquashTM integration status
- **Step Builder**: Step-by-step wizard for creating flow steps
- **Preview Panel**: Shows how variables will be merged
- **Validation**: Real-time validation of GitLab branch existence

**Features**:
- Visual step builder
- Branch validation
- Test data preview
- Duplicate step functionality

### 5. Flows (`/flows`)
**Purpose**: Orchestrate flow sequences

**Components**:
- **Flow Designer**: Drag-and-drop interface for arranging flow steps
- **Flow List**: Table showing all flows with execution statistics
- **Flow Detail**: Comprehensive view showing:
  - Step sequence with visual flow diagram
  - Execution history
  - Success/failure rates
  - Average execution time
- **Flow Builder**: Multi-step wizard for flow creation

**Features**:
- Visual flow designer with drag-and-drop
- Step dependency visualization
- Flow validation
- Clone flow functionality
- Flow templates

### 6. Executions (`/executions`)
**Purpose**: Monitor and manage flow executions

**Components**:
- **Execution Dashboard**: Real-time view of active executions
- **Execution List**: Filterable table with:
  - Flow name and execution ID
  - Status with progress indicators
  - Start/end times
  - Duration
  - Actions (view details, replay)
- **Execution Detail**: Comprehensive execution view with:
  - Step-by-step progress
  - Pipeline execution details
  - Runtime variables
  - Logs and artifacts
  - Replay functionality
- **Real-time Updates**: WebSocket integration for live updates

**Features**:
- Real-time execution monitoring
- Detailed execution timeline
- Replay from failed steps
- Log streaming
- Execution comparison

### 7. Analytics (`/analytics`)
**Purpose**: Comprehensive reporting and metrics

**Components**:
- **Metrics Overview**: Key performance indicators
- **Trend Charts**: Interactive charts showing:
  - Pass/fail trends over time
  - Execution duration trends
  - Flow popularity
  - Failure analysis
- **Detailed Reports**: Drill-down capabilities
- **Export Functionality**: PDF and CSV exports
- **Custom Dashboards**: User-configurable widgets

**Features**:
- Interactive charts with drill-down
- Custom date ranges
- Comparative analysis
- Automated reports
- Performance benchmarking

### 8. SquashTM Integration (`/squashtm`)
**Purpose**: Manage SquashTM integration

**Components**:
- **Project Browser**: Tree view of SquashTM projects
- **Test Case Explorer**: Browse and select test cases
- **Association Manager**: Link flows with test cases
- **Sync Status**: Show synchronization status
- **Mapping Overview**: Visual representation of flow-to-test-case mappings

**Features**:
- SquashTM project browsing
- Test case association
- Synchronization monitoring
- Mapping visualization

### 9. Settings (`/settings`)
**Purpose**: Application configuration

**Components**:
- **GitLab Configuration**: API settings, mock mode toggle
- **Database Settings**: Connection status, migration info
- **Thread Pool Configuration**: Async execution settings
- **Notification Settings**: Alert preferences
- **User Preferences**: Theme, language, dashboard layout
- **System Information**: Version, health checks, logs

**Features**:
- Configuration validation
- Settings import/export
- System health monitoring
- User preference management

---

## 🔧 Technical Implementation Details

### API Integration
```typescript
// Base API configuration
const API_BASE_URL = 'http://localhost:8080';

// API client with interceptors
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// React Query configuration
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      cacheTime: 10 * 60 * 1000, // 10 minutes
      retry: 3,
      refetchOnWindowFocus: false,
    },
  },
});
```

### State Management
```typescript
// Zustand store for global state
interface AppStore {
  theme: 'light' | 'dark';
  sidebarCollapsed: boolean;
  activeExecutions: FlowExecution[];
  notifications: Notification[];
  // ... other global state
}
```

### Component Architecture
- **Atomic Design**: Atoms, molecules, organisms, templates, pages
- **Custom Hooks**: Reusable logic for API calls, form handling, etc.
- **Context Providers**: Theme, auth, notifications
- **Higher-Order Components**: Error boundaries, loading states

### Real-time Features
```typescript
// WebSocket integration for real-time updates
const useWebSocket = (url: string) => {
  // Implementation for real-time execution updates
};

// Real-time execution monitoring
const useExecutionUpdates = (executionId: string) => {
  // Subscribe to execution status changes
};
```

---

## 🎯 Key Features & Interactions

### 1. Flow Execution Monitoring
- **Real-time Progress**: Live updates of execution status
- **Step Visualization**: Visual progress through flow steps
- **Interactive Timeline**: Click to see step details
- **Replay Functionality**: One-click replay from failed steps

### 2. Drag-and-Drop Flow Builder
- **Visual Designer**: Drag flow steps to arrange sequence
- **Connection Lines**: Visual representation of step dependencies
- **Validation**: Real-time validation of flow configuration
- **Preview Mode**: See how variables flow between steps

### 3. Advanced Search & Filtering
- **Global Search**: Search across all entities
- **Smart Filters**: Context-aware filtering options
- **Saved Searches**: Save frequently used search criteria
- **Quick Filters**: One-click common filters

### 4. Data Visualization
- **Interactive Charts**: Hover effects, drill-down capabilities
- **Real-time Metrics**: Live updating dashboards
- **Comparative Views**: Side-by-side comparisons
- **Export Options**: PNG, PDF, CSV exports

### 5. Responsive Design
- **Mobile-First**: Optimized for mobile devices
- **Tablet Layout**: Adapted layouts for tablets
- **Desktop Experience**: Full-featured desktop interface
- **Progressive Enhancement**: Works without JavaScript

---

## 🎨 Component Examples

### Flow Execution Card
```typescript
interface FlowExecutionCardProps {
  execution: FlowExecution;
  onReplay: (executionId: string, stepId: number) => void;
  onViewDetails: (executionId: string) => void;
}

const FlowExecutionCard: React.FC<FlowExecutionCardProps> = ({
  execution,
  onReplay,
  onViewDetails,
}) => {
  return (
    <Card className="hover:shadow-lg transition-shadow duration-200">
      <CardHeader>
        <div className="flex justify-between items-center">
          <Badge variant={getStatusVariant(execution.status)}>
            {execution.status}
          </Badge>
          <DropdownMenu>
            {/* Actions menu */}
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent>
        {/* Execution details */}
        <ProgressBar 
          value={getExecutionProgress(execution)} 
          className="mt-4"
        />
      </CardContent>
    </Card>
  );
};
```

### Analytics Chart Component
```typescript
const ExecutionTrendsChart: React.FC<{
  data: TrendData[];
  timeRange: TimeRange;
}> = ({ data, timeRange }) => {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Execution Trends</CardTitle>
        <TimeRangeSelector 
          value={timeRange} 
          onChange={setTimeRange} 
        />
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={300}>
          <LineChart data={data}>
            <XAxis dataKey="date" />
            <YAxis />
            <Tooltip />
            <Line 
              type="monotone" 
              dataKey="passed" 
              stroke="#10b981" 
              strokeWidth={2}
            />
            <Line 
              type="monotone" 
              dataKey="failed" 
              stroke="#ef4444" 
              strokeWidth={2}
            />
          </LineChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
};
```

---

## 🚀 Performance Requirements

### Loading Performance
- **Initial Load**: < 3 seconds on 3G
- **Route Transitions**: < 500ms
- **API Responses**: Loading states for > 200ms requests
- **Image Optimization**: Next.js Image component with lazy loading

### Runtime Performance
- **60 FPS**: Smooth animations and interactions
- **Memory Usage**: Efficient cleanup of subscriptions
- **Bundle Size**: < 500KB initial bundle
- **Code Splitting**: Route-based and component-based splitting

### Accessibility
- **Keyboard Navigation**: Full keyboard accessibility
- **Screen Readers**: Proper ARIA labels and roles
- **Color Contrast**: WCAG AA compliance
- **Focus Management**: Logical focus flow

---

## 📦 Project Structure

```
src/
├── app/                    # Next.js 14 app directory
│   ├── (dashboard)/       # Dashboard layout group
│   ├── globals.css        # Global styles
│   ├── layout.tsx         # Root layout
│   └── page.tsx           # Home page
├── components/            # Reusable components
│   ├── ui/               # shadcn/ui components
│   ├── forms/            # Form components
│   ├── charts/           # Chart components
│   └── layout/           # Layout components
├── hooks/                # Custom React hooks
├── lib/                  # Utility functions
│   ├── api.ts           # API client
│   ├── utils.ts         # General utilities
│   └── validations.ts   # Zod schemas
├── stores/               # Zustand stores
├── types/                # TypeScript type definitions
└── constants/            # Application constants
```

---

## 🔐 Security Considerations

### API Security
- **CORS Configuration**: Proper CORS setup for development
- **Request Validation**: Client-side validation with server-side backup
- **Error Handling**: Secure error messages without sensitive data
- **Rate Limiting**: Respect API rate limits

### Data Protection
- **Sensitive Data**: Mask tokens and passwords in UI
- **Local Storage**: Minimal use, no sensitive data
- **Session Management**: Proper session handling
- **Input Sanitization**: Prevent XSS attacks

---

## 🧪 Testing Strategy

### Unit Testing
- **Jest + React Testing Library**: Component testing
- **MSW (Mock Service Worker)**: API mocking
- **Coverage Target**: > 80% code coverage

### Integration Testing
- **Playwright**: E2E testing
- **API Integration**: Test real API interactions
- **User Flows**: Test complete user journeys

### Performance Testing
- **Lighthouse**: Performance auditing
- **Bundle Analyzer**: Bundle size monitoring
- **Load Testing**: Stress test with large datasets

---

## 📚 Documentation Requirements

### Code Documentation
- **JSDoc Comments**: Comprehensive component documentation
- **README**: Setup and development instructions
- **Storybook**: Component library documentation
- **API Documentation**: Integration guide

### User Documentation
- **User Guide**: Step-by-step usage instructions
- **Feature Documentation**: Detailed feature explanations
- **Troubleshooting**: Common issues and solutions
- **Video Tutorials**: Screen recordings for complex features

---

## 🎯 Success Criteria

### Functional Requirements
- ✅ All backend API endpoints integrated
- ✅ Real-time execution monitoring
- ✅ Replay functionality working
- ✅ Analytics dashboard functional
- ✅ Responsive design implemented

### Non-Functional Requirements
- ✅ < 3 second initial load time
- ✅ WCAG AA accessibility compliance
- ✅ 95%+ uptime in production
- ✅ Cross-browser compatibility (Chrome, Firefox, Safari, Edge)
- ✅ Mobile-responsive design

### User Experience
- ✅ Intuitive navigation
- ✅ Consistent design language
- ✅ Helpful error messages
- ✅ Efficient workflows
- ✅ Professional appearance

---

## 🚀 Deployment & DevOps

### Development Environment
```bash
# Package manager: npm or yarn
npm install
npm run dev

# Environment variables
NEXT_PUBLIC_API_URL=http://localhost:8080
NEXT_PUBLIC_WS_URL=ws://localhost:8080/ws
```

### Production Build
```bash
npm run build
npm run start

# Docker deployment
docker build -t pipeline-orchestrator-ui .
docker run -p 3000:3000 pipeline-orchestrator-ui
```

### CI/CD Pipeline
- **GitHub Actions**: Automated testing and deployment
- **Vercel/Netlify**: Easy deployment options
- **Docker**: Containerized deployment
- **Environment Management**: Separate dev/staging/prod configs

---

## 💡 Innovation Opportunities

### Advanced Features
- **AI-Powered Insights**: Predictive analytics for failure patterns
- **Voice Commands**: Voice-controlled navigation
- **Collaborative Features**: Team collaboration on flow design
- **Mobile App**: React Native companion app
- **Browser Extension**: Quick access to common actions

### Integration Possibilities
- **Slack/Teams**: Notification integrations
- **JIRA**: Issue tracking integration
- **Grafana**: Advanced monitoring dashboards
- **Jenkins**: CI/CD pipeline integration
- **Kubernetes**: Container orchestration monitoring

---

## 🎨 Design Inspiration

### Reference Applications
- **GitLab CI/CD Interface**: Pipeline visualization
- **GitHub Actions**: Workflow management
- **Grafana**: Dashboard design
- **Vercel Dashboard**: Clean, modern interface
- **Linear**: Smooth interactions and animations

### Design Systems
- **Tailwind UI**: Component patterns
- **shadcn/ui**: Component library
- **Radix UI**: Accessible primitives
- **Framer Motion**: Animation patterns

---

## 📋 Deliverables Checklist

### Core Application
- [ ] Next.js 14 application with TypeScript
- [ ] All pages implemented and functional
- [ ] API integration complete
- [ ] Real-time features working
- [ ] Responsive design implemented

### Quality Assurance
- [ ] Unit tests written and passing
- [ ] E2E tests implemented
- [ ] Accessibility testing complete
- [ ] Performance optimization done
- [ ] Cross-browser testing passed

### Documentation
- [ ] Code documentation complete
- [ ] User guide written
- [ ] Deployment guide created
- [ ] API integration documented
- [ ] Troubleshooting guide available

### Production Readiness
- [ ] Environment configuration
- [ ] Error handling implemented
- [ ] Logging and monitoring setup
- [ ] Security review complete
- [ ] Performance benchmarks met

---

**Target Completion**: 2-3 weeks for MVP, 4-6 weeks for full-featured application

**Note**: This prompt is designed to create a production-ready, enterprise-grade frontend that matches the sophistication of the Spring Boot backend. The resulting application should be suitable for use by technical teams in professional environments.